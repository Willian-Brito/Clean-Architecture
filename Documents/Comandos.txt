			
								######################
								# CLEAN ARCHITECTURE #
								######################
			
# ESTRUTURA

[+] Core
	* Core.Domain - Modelo de domínio, regras de negocio, interfaces
	* Core.Application - Regras de domínio da aplicação, fluxos, mapeamentos, serviços, DTOs, CQRS

[+] Infrastucture	
	* Infra.Data - EF Core, Contexto, Configurações, Migrations, Repository
	
[+] Adapters
	* Adapter.IoC - Injeção de dependencia, registro dos serviços, tempo de vida das injeções

[+] Presentation	
	* WebApp - MVC, Controllers, Views, Filtros, ViewModels

-> O Projeto WebApp é do tipo ASP.NET Core WebApp (MVC)
-> Os Demais projetos serão do tipo Class Library

******************************************************************************************

# DEPENDENCIA

Core.Domain - Não possui nehuma dependencia
Core.Application - Dependencia com projeto Domain
Infra.Data - Dependencia com projeto Domain
Adapter.IoC - Dependencia com projeto Domain, Application, Infra.Data
WebApp - Dependencia com projeto Infra.IoC
WebApi - Dependencia com projeto Infra.IoC


******************************************************************************************

# COMANDOS

-> Listar Projetos: 					dotnet new list
-> Criar Solução: 						dotnet new sln --name CleanArch
-> Criar Projeto: 						dotnet new classlib --name Core.Domain
-> Adiconar Projeto na Solution: 		dotnet sln CleanArch.sln add ./Core/Core.Domain/Core.Domain.csproj
-> Rodar Projeto: 						dotnet run --project ./Presentation/WepApp/WepApp.csproj
-> Adicionando Dependencia no projeto: 	dotnet add ./Core/Core.Application/Core.Application.csproj reference ./Core/Core.Domain/Core.Domain.csproj 

******************************************************************************************

# DEPENDENCIAS EXTERNAS

[+] Test: 
	* dotnet add package FluentAssertions
	
[+] Data: 
	* dotnet add package Microsoft.EntityFrameworkCore.SqlServer
	* dotnet add package Microsoft.EntityFrameworkCore.Tools
	* dotnet add package Microsoft.EntityFrameworkCore.Design
	* dotnet add package Microsoft.AspNetCore.Identity 
	* dotnet add package Microsoft.AspNetCore.Identity.EntityFrameworkCore

[+] Application
	* dotnet add package AutoMapper
	* dotnet add package MediatR
	
[+] IoC
	* dotnet add package AutoMapper.Extensions.Microsoft.DependencyInjection
	* dotnet add package MediatR
	* dotnet add package Microsoft.AspNetCore.Authentication.JwtBearer --version 7.0.0
	* dotnet add package Swashbuckle.AspNetCore.Swagger --version 6.5.0
	* dotnet add package Swashbuckle.AspNetCore.SwaggerGen --version 6.5.0
	* dotnet add package Swashbuckle.AspNetCore.SwaggerUI --version 6.5.0

[+] API
	* dotnet add package Microsoft.AspNetCore.Authentication.JwtBearer --version 7.0.0
	* dotnet add package Microsoft.IdentityModel.Tokens --version 7.0.3
	* dotnet add package System.IdentityModel.Tokens.Jwt --version 7.0.3
	
******************************************************************************************

# MIGRATIONS

Instalar: 				dotnet tool install --global dotnet-ef
Adicionar Migration: 	dotnet ef migrations add <nome>
Adicionar Migration: 	dotnet ef migrations add <nome> --project Infra.Data -s WebApp -c ApplicationDbContext --verbose
Confirmar Alterações: 	dotnet ef database update
Remover Migration: 		dotnet ef migrations remove
Listar Migration:		dotnet ef migrations list

******************************************************************************************

# INJEÇÃO DE DEPENDÊNCIA

Para utilizar o container de injeção de dependência nativo do .NET, basta utilizar a interface IServiceCollection do pacote Microsoft.Extensions.DependencyInjection e o próprio runtime (CLR) do .NET, cria as instâncias e injeta as dependências.

Para fazer tudo isso funcionar, basta registrar via código os serviços, na classe Startup.cs no método ConfigureServices ou criar uma camada de injeção de dependência (IoC) e adicioanar um método de extensão para a interface IServiceCollection, para que sua camada de apresentação não dependa de códigos de infraestrutura como entity framework e classes repositórios, violando a regra de dependência.

Na implementação da injeção de dependênica na ASP.NET Core, temos o conceito de lifetimes ou tempo de vida que especifica quando um objeto é criado ou recriado.

* Transient (AddTransient): Cria os objetos a cada vez que forem injetados em alguma classe (instância).

* Scoped (AddScoped): Cria os objetos uma vez por solicitação (request).

* Singleton (AddSingleton): Cria os objetos apenas na primeira vez e será reutilizado durante todo o ciclo de vida da aplicação para todas as requests de todos os usuários.

******************************************************************************************

